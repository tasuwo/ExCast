///
/// @Generated by Mockolo
///

import Common
@testable import Domain
import Foundation
import MediaPlayer
import RxRelay
import RxSwift
import UIKit

public class RemoteCommandHandlerProtocolMock: RemoteCommandHandlerProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }

    public var registerCallCount = 0
    public var registerHandler: ((ExCastPlayerProtocol) -> Void)?
    public func register(delegate player: ExCastPlayerProtocol) {
        registerCallCount += 1
        if let registerHandler = registerHandler {
            registerHandler(player)
        }
    }

    public var setupCallCount = 0
    public var setupHandler: ((Show, Episode, Double, Double, Double) -> Void)?
    public func setup(show: Show, episode: Episode, duration: Double, currentTime: Double, currentRate: Double) {
        setupCallCount += 1
        if let setupHandler = setupHandler {
            setupHandler(show, episode, duration, currentTime, currentRate)
        }
    }

    public var syncCallCount = 0
    public var syncHandler: ((Double, Double) -> Void)?
    public func sync(currentTime: Double, currentRate: Double) {
        syncCallCount += 1
        if let syncHandler = syncHandler {
            syncHandler(currentTime, currentRate)
        }
    }
}

public class PodcastFactoryProtocolMock: PodcastFactoryProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }

    public static var makeCallCount = 0
    public static var makeHandler: ((Data) -> (Podcast?))?
    public static func make(by data: Data) -> Podcast? {
        makeCallCount += 1
        if let makeHandler = makeHandler {
            return makeHandler(data)
        }
        return nil
    }
}

public class ExCastPlayerProtocolMock: ExCastPlayerProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }
    public init(createdPlayer: BehaviorRelay<Bool>) {
        self.createdPlayer = createdPlayer
        _doneInit = true
    }

    public var createdPlayerSetCallCount = 0
    var underlyingCreatedPlayer: BehaviorRelay<Bool>!
    public var createdPlayer: BehaviorRelay<Bool> {
        get { return underlyingCreatedPlayer }
        set {
            underlyingCreatedPlayer = newValue
            if _doneInit { createdPlayerSetCallCount += 1 }
        }
    }

    public var playCallCount = 0
    public var playHandler: (() -> Void)?
    public func play() {
        playCallCount += 1
        if let playHandler = playHandler {
            playHandler()
        }
    }

    public var pauseCallCount = 0
    public var pauseHandler: (() -> Void)?
    public func pause() {
        pauseCallCount += 1
        if let pauseHandler = pauseHandler {
            pauseHandler()
        }
    }

    public var seekCallCount = 0
    public var seekHandler: ((TimeInterval, @escaping (Bool) -> Void) -> Void)?
    public func seek(to time: TimeInterval, completion: @escaping (Bool) -> Void) {
        seekCallCount += 1
        if let seekHandler = seekHandler {
            seekHandler(time, completion)
        }
    }

    public var skipForwardCallCount = 0
    public var skipForwardHandler: ((TimeInterval, @escaping (Bool) -> Void) -> Void)?
    public func skipForward(duration seconds: TimeInterval, completion: @escaping (Bool) -> Void) {
        skipForwardCallCount += 1
        if let skipForwardHandler = skipForwardHandler {
            skipForwardHandler(seconds, completion)
        }
    }

    public var skipBackwardCallCount = 0
    public var skipBackwardHandler: ((TimeInterval, @escaping (Bool) -> Void) -> Void)?
    public func skipBackward(duration seconds: TimeInterval, completion: @escaping (Bool) -> Void) {
        skipBackwardCallCount += 1
        if let skipBackwardHandler = skipBackwardHandler {
            skipBackwardHandler(seconds, completion)
        }
    }

    public var registerCallCount = 0
    public var registerHandler: ((ExCastPlayerDelegate) -> Void)?
    public func register(delegate: ExCastPlayerDelegate) {
        registerCallCount += 1
        if let registerHandler = registerHandler {
            registerHandler(delegate)
        }
    }
}

public class ThumbnailDownloaderProtocolMock: ThumbnailDownloaderProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }

    public var startDownloadCallCount = 0
    public var startDownloadHandler: ((URL, @escaping (Result<UIImage, Error>) -> Void) -> Void)?
    public func startDownload(by url: URL, completion: @escaping (Result<UIImage, Error>) -> Void) {
        startDownloadCallCount += 1
        if let startDownloadHandler = startDownloadHandler {
            startDownloadHandler(url, completion)
        }
    }

    public var cancelDownloadCallCount = 0
    public var cancelDownloadHandler: (() -> Void)?
    public func cancelDownload() {
        cancelDownloadCallCount += 1
        if let cancelDownloadHandler = cancelDownloadHandler {
            cancelDownloadHandler()
        }
    }
}

public class PodcastGatewayProtocolMock: PodcastGatewayProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }
    public init(state: BehaviorRelay<PodcastGatewayQuery>, command: PublishRelay<PodcastGatewayCommand>) {
        self.state = state
        self.command = command
        _doneInit = true
    }

    public var stateSetCallCount = 0
    var underlyingState: BehaviorRelay<PodcastGatewayQuery>!
    public var state: BehaviorRelay<PodcastGatewayQuery> {
        get { return underlyingState }
        set {
            underlyingState = newValue
            if _doneInit { stateSetCallCount += 1 }
        }
    }

    public var commandSetCallCount = 0
    var underlyingCommand: PublishRelay<PodcastGatewayCommand>!
    public var command: PublishRelay<PodcastGatewayCommand> {
        get { return underlyingCommand }
        set {
            underlyingCommand = newValue
            if _doneInit { commandSetCallCount += 1 }
        }
    }
}

public class PushNotificationProviderGatewayProtocolMock: PushNotificationProviderGatewayProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }

    public var registerCallCount = 0
    public var registerHandler: ((Data, NotificationContext, @escaping (Result<ProviderKey, PushNotificationProviderGatewayError>) -> Void) -> Void)?
    public func register(_ token: Data, context: NotificationContext, completion: @escaping (Result<ProviderKey, PushNotificationProviderGatewayError>) -> Void) {
        registerCallCount += 1
        if let registerHandler = registerHandler {
            registerHandler(token, context, completion)
        }
    }

    public var updateCallCount = 0
    public var updateHandler: ((ProviderKey, NotificationContext, @escaping (Result<Void, PushNotificationProviderGatewayError>) -> Void) -> Void)?
    public func update(_ key: ProviderKey, context: NotificationContext, completion: @escaping (Result<Void, PushNotificationProviderGatewayError>) -> Void) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(key, context, completion)
        }
    }

    public var unregisterCallCount = 0
    public var unregisterHandler: ((ProviderKey, @escaping (Result<Void, PushNotificationProviderGatewayError>) -> Void) -> Void)?
    public func unregister(_ key: ProviderKey, completion: @escaping (Result<Void, PushNotificationProviderGatewayError>) -> Void) {
        unregisterCallCount += 1
        if let unregisterHandler = unregisterHandler {
            unregisterHandler(key, completion)
        }
    }
}

public class PodcastServiceProtocolMock: PodcastServiceProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }
    public init(state: BehaviorRelay<PodcastServiceQuery>, command: PublishRelay<PodcastServiceCommand>) {
        self.state = state
        self.command = command
        _doneInit = true
    }

    public var stateSetCallCount = 0
    var underlyingState: BehaviorRelay<PodcastServiceQuery>!
    public var state: BehaviorRelay<PodcastServiceQuery> {
        get { return underlyingState }
        set {
            underlyingState = newValue
            if _doneInit { stateSetCallCount += 1 }
        }
    }

    public var commandSetCallCount = 0
    var underlyingCommand: PublishRelay<PodcastServiceCommand>!
    public var command: PublishRelay<PodcastServiceCommand> {
        get { return underlyingCommand }
        set {
            underlyingCommand = newValue
            if _doneInit { commandSetCallCount += 1 }
        }
    }
}

public class EpisodeServiceProtocolMock: EpisodeServiceProtocol {
    private var _doneInit = false

    public init() { _doneInit = true }
    public init(state: BehaviorRelay<EpisodeServiceQuery>, command: PublishRelay<EpisodeServiceCommand>) {
        self.state = state
        self.command = command
        _doneInit = true
    }

    public var stateSetCallCount = 0
    var underlyingState: BehaviorRelay<EpisodeServiceQuery>!
    public var state: BehaviorRelay<EpisodeServiceQuery> {
        get { return underlyingState }
        set {
            underlyingState = newValue
            if _doneInit { stateSetCallCount += 1 }
        }
    }

    public var commandSetCallCount = 0
    var underlyingCommand: PublishRelay<EpisodeServiceCommand>!
    public var command: PublishRelay<EpisodeServiceCommand> {
        get { return underlyingCommand }
        set {
            underlyingCommand = newValue
            if _doneInit { commandSetCallCount += 1 }
        }
    }
}

public class ExCastPlayerDelegateMock: ExCastPlayerDelegate {
    private var _doneInit = false

    public init() { _doneInit = true }

    public var didPrepareCallCount = 0
    public var didPrepareHandler: ((TimeInterval) -> Void)?
    public func didPrepare(duration: TimeInterval) {
        didPrepareCallCount += 1
        if let didPrepareHandler = didPrepareHandler {
            didPrepareHandler(duration)
        }
    }

    public var didChangePlayingStateCallCount = 0
    public var didChangePlayingStateHandler: ((ExCastPlayerState) -> Void)?
    public func didChangePlayingState(to state: ExCastPlayerState) {
        didChangePlayingStateCallCount += 1
        if let didChangePlayingStateHandler = didChangePlayingStateHandler {
            didChangePlayingStateHandler(state)
        }
    }

    public var didChangePlaybackRateCallCount = 0
    public var didChangePlaybackRateHandler: ((Double) -> Void)?
    public func didChangePlaybackRate(to rate: Double) {
        didChangePlaybackRateCallCount += 1
        if let didChangePlaybackRateHandler = didChangePlaybackRateHandler {
            didChangePlaybackRateHandler(rate)
        }
    }

    public var didSeekCallCount = 0
    public var didSeekHandler: ((TimeInterval) -> Void)?
    public func didSeek(to time: TimeInterval) {
        didSeekCallCount += 1
        if let didSeekHandler = didSeekHandler {
            didSeekHandler(time)
        }
    }

    public var didChangePlaybackTimeCallCount = 0
    public var didChangePlaybackTimeHandler: ((TimeInterval) -> Void)?
    public func didChangePlaybackTime(to time: TimeInterval) {
        didChangePlaybackTimeCallCount += 1
        if let didChangePlaybackTimeHandler = didChangePlaybackTimeHandler {
            didChangePlaybackTimeHandler(time)
        }
    }
}
